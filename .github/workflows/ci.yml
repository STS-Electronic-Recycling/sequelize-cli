name: CI
on:
  push:
    branches:
      - main
      - v6
      - v7
  pull_request:

jobs:
  install-and-build:
    strategy:
      fail-fast: false
      matrix:
        node-version: [10, 16]
    name: Upload install and build artifact (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - name: Install dependencies and build sequelize
        run: yarn install --frozen-lockfile --ignore-engines
        if: matrix.node-version == 10
      - name: Install dependencies and build sequelize
        run: yarn install --frozen-lockfile
        if: matrix.node-version == 16
      - name: Compress artifact
        run: tar -cf install-build-node-${{ matrix.node-version }}.tar ./lib ./node_modules
      - uses: actions/upload-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
          path: install-build-node-${{ matrix.node-version }}.tar
          retention-days: 1
  test-db2:
    strategy:
      fail-fast: false
      matrix:
        node-version: [10, 16]
    name: DB2 (Node ${{ matrix.node-version }}, Sequelize latest)
    runs-on: ubuntu-latest
    needs: install-and-build
    env:
      DIALECT: db2
      SEQ_DB: testdb
      SEQ_USER: db2inst1
      SEQ_PW: password
      SEQ_TEST_CLEANUP_TIMEOUT: 1200000
      SEQ_PORT: 50000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - run: npm install --no-save --no-audit sequelize@latest
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Install Local DB2 Copy
        run: yarn start-db2
      - name: Tests
        run: yarn test
  # test-postgres:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: [10, 16]
  #       sequelize-version: [5, latest]
  #   name: Postgres (Node ${{ matrix.node-version }}, Sequelize ${{ matrix.sequelize-version }})
  #   runs-on: ubuntu-latest
  #   env:
  #     DIALECT: postgres
  #     SEQ_PORT: 54320
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: yarn install --frozen-lockfile --ignore-engines
  #     - run: yarn add sequelize@${{ matrix.sequelize-version }} --ignore-engines
  #     - run: docker-compose up -d ${DIALECT}
  #     - run: docker run --link ${DIALECT}:db -e CHECK_PORT=${SEQ_PORT::-1} -e CHECK_HOST=db --net cli_default giorgos/takis
  #     - run: yarn test
  # test-mysql:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: [10, 16]
  #       sequelize-version: [5, latest]
  #   name: MySQL (Node ${{ matrix.node-version }}, Sequelize ${{ matrix.sequelize-version }})
  #   runs-on: ubuntu-latest
  #   env:
  #     DIALECT: mysql
  #     SEQ_PORT: 33060
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: yarn install --frozen-lockfile --ignore-engines
  #     - run: yarn add sequelize@${{ matrix.sequelize-version }} --ignore-engines
  #     - run: docker-compose up -d ${DIALECT}
  #     - run: docker run --link ${DIALECT}:db -e CHECK_PORT=${SEQ_PORT::-1} -e CHECK_HOST=db --net cli_default giorgos/takis
  #     - run: yarn test
  # test-sqlite:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       node-version: [10, 16]
  #       sequelize-version: [5, latest]
  #   name: SQLite (Node ${{ matrix.node-version }}, Sequelize ${{ matrix.sequelize-version }})
  #   runs-on: ubuntu-latest
  #   env:
  #     DIALECT: sqlite
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}
  #     - run: yarn install --frozen-lockfile --ignore-engines
  #     - run: yarn add sequelize@${{ matrix.sequelize-version }} --ignore-engines
  #     - run: yarn test
  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      [
        test-sqlite,
        test-postgres,
        test-mysql-mariadb,
        test-mssql,
      ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/v6' || github.ref == 'refs/heads/v7')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-16
      - name: Extract artifact
        run: tar -xf install-build-node-16.tar
      - run: yarn semantic-release
      - id: sequelize
        uses: sdepold/github-action-get-latest-release@master
        with:
          repository: sequelize/cli
      - run: |
          curl -XPOST -u "sdepold:${{ secrets.GH_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -H "Content-Type: application/json" https://api.github.com/repos/sequelize/cli/dispatches --data '{"event_type":"Release notifier","client_payload":{"release-id": ${{ steps.sequelize.outputs.id }}}}'
